age.std =cfit[6],
intercept.df =cfit[7],
time_rescaled.df =cfit[8],
age.df =cfit[9],
intercept.tval =cfit[10],
time_rescaled.tval =cfit[11],
age.tval =cfit[12],
intercept.pval =cfit[13],
time_rescaled.pval =cfit[14],
age.pval =cfit[15],
stringsAsFactors = F)
df2<- cbind(df, n)
# Bind rows of temporary data frame to the results data frame
results <- rbind(results, df2)
#results<- cbind(results, n)
}
}
}
AgeGroup<-as.factor(emsci.trauma.sex.baseline.ais$AgeGroup)
# Create data frame to store results
results <- data.frame()
for (j in rescaled.nli){
for (i in ais.score){
for (h in AgeGroup){
print(paste("MODEL",j, i,  sep = " "))
df1 = subset(emsci.rescaled, (baseline.ais == i & plegia == j))
if (nrow(df1) == 0) next
mixed.lmer<- nlme::lme(WISCI ~ ExamStage_weeks.rescaled*YEARDOI.rescaled, df1, random = ~ 1|Patientennummer, na.action = na.exclude)
print(summary(mixed.lmer))
# mixed.lmer <- nlme::nlme(LEMS ~ SSasympOff(ExamStage_weeks.rescaled*YEARDOI.rescaled+AgeAtDOI.rescaled, Asym, R0, lrc),
#            data = df1,
#            fixed = Asym + R0 + lrc ~ 1,
#            random = Asym ~ 1,
#            na.action=na.exclude,
#            na.fail(emsci.rescaled),
#            naPattern = ~ !is.na(LEMS),
#            method="ML",verbose=TRUE)
n <- count(ranef(mixed.lmer))
# Capture summary stats
intercept.estimate <- coef(summary(mixed.lmer))[1]
time_rescaled.estimate <- coef(summary(mixed.lmer))[2]
age.estimate <- coef(summary(mixed.lmer))[3]
intercept.std <- coef(summary(mixed.lmer))[4]
time_rescaled.std <- coef(summary(mixed.lmer))[5]
age.std <- coef(summary(mixed.lmer))[6]
intercept.df <- coef(summary(mixed.lmer))[7]
time_rescaled.df <- coef(summary(mixed.lmer))[8]
age.df <- coef(summary(mixed.lmer))[9]
intercept.tval <- coef(summary(mixed.lmer))[10]
time_rescaled.tval <- coef(summary(mixed.lmer))[11]
age.tval <- coef(summary(mixed.lmer))[12]
intercept.pval <- coef(summary(mixed.lmer))[13]
time_rescaled.pval <- coef(summary(mixed.lmer))[14]
age.pval <- coef(summary(mixed.lmer))[15]
# Get coefficents of mixed.lmer
cfit <- coef(summary(mixed.lmer))
# Create temporary data frame
df <- data.frame( plegia= j,AIS = i, intercept.estimate = cfit[1], time_rescaled.estimate = cfit[2],
age.estimate= cfit[3], intercept.std= cfit[4],
time_rescaled.std =cfit[5],
age.std =cfit[6],
intercept.df =cfit[7],
time_rescaled.df =cfit[8],
age.df =cfit[9],
intercept.tval =cfit[10],
time_rescaled.tval =cfit[11],
age.tval =cfit[12],
intercept.pval =cfit[13],
time_rescaled.pval =cfit[14],
age.pval =cfit[15],
stringsAsFactors = F)
df2<- cbind(df, n)
# Bind rows of temporary data frame to the results data frame
results <- rbind(results, df2)
#results<- cbind(results, n)
}
}
}
AgeGroup<-as.factor(emsci.trauma.sex.baseline.ais$AgeGroup)
AgeGroup
# Create data frame to store results
results <- data.frame()
for (j in rescaled.nli){
for (i in ais.score){
for (h in AgeGroup){
print(paste("MODEL",j, i,  h,sep = " "))
df1 = subset(emsci.rescaled, (baseline.ais == i & plegia == j))
if (nrow(df1) == 0) next
mixed.lmer<- nlme::lme(WISCI ~ ExamStage_weeks.rescaled*YEARDOI.rescaled, df1, random = ~ 1|Patientennummer, na.action = na.exclude)
print(summary(mixed.lmer))
# mixed.lmer <- nlme::nlme(LEMS ~ SSasympOff(ExamStage_weeks.rescaled*YEARDOI.rescaled+AgeAtDOI.rescaled, Asym, R0, lrc),
#            data = df1,
#            fixed = Asym + R0 + lrc ~ 1,
#            random = Asym ~ 1,
#            na.action=na.exclude,
#            na.fail(emsci.rescaled),
#            naPattern = ~ !is.na(LEMS),
#            method="ML",verbose=TRUE)
n <- count(ranef(mixed.lmer))
# Capture summary stats
intercept.estimate <- coef(summary(mixed.lmer))[1]
time_rescaled.estimate <- coef(summary(mixed.lmer))[2]
age.estimate <- coef(summary(mixed.lmer))[3]
intercept.std <- coef(summary(mixed.lmer))[4]
time_rescaled.std <- coef(summary(mixed.lmer))[5]
age.std <- coef(summary(mixed.lmer))[6]
intercept.df <- coef(summary(mixed.lmer))[7]
time_rescaled.df <- coef(summary(mixed.lmer))[8]
age.df <- coef(summary(mixed.lmer))[9]
intercept.tval <- coef(summary(mixed.lmer))[10]
time_rescaled.tval <- coef(summary(mixed.lmer))[11]
age.tval <- coef(summary(mixed.lmer))[12]
intercept.pval <- coef(summary(mixed.lmer))[13]
time_rescaled.pval <- coef(summary(mixed.lmer))[14]
age.pval <- coef(summary(mixed.lmer))[15]
# Get coefficents of mixed.lmer
cfit <- coef(summary(mixed.lmer))
# Create temporary data frame
df <- data.frame( plegia= j,AIS = i, intercept.estimate = cfit[1], time_rescaled.estimate = cfit[2],
age.estimate= cfit[3], intercept.std= cfit[4],
time_rescaled.std =cfit[5],
age.std =cfit[6],
intercept.df =cfit[7],
time_rescaled.df =cfit[8],
age.df =cfit[9],
intercept.tval =cfit[10],
time_rescaled.tval =cfit[11],
age.tval =cfit[12],
intercept.pval =cfit[13],
time_rescaled.pval =cfit[14],
age.pval =cfit[15],
stringsAsFactors = F)
df2<- cbind(df, n)
# Bind rows of temporary data frame to the results data frame
results <- rbind(results, df2)
#results<- cbind(results, n)
}
}
}
AgeGroup<-unique(as.factor(emsci.trauma.sex.baseline.ais$AgeGroup))
# Create data frame to store results
results <- data.frame()
for (j in rescaled.nli){
for (i in ais.score){
for (h in AgeGroup){
print(paste("MODEL",j, i,  h,sep = " "))
df1 = subset(emsci.rescaled, (baseline.ais == i & plegia == j))
if (nrow(df1) == 0) next
mixed.lmer<- nlme::lme(WISCI ~ ExamStage_weeks.rescaled*YEARDOI.rescaled, df1, random = ~ 1|Patientennummer, na.action = na.exclude)
print(summary(mixed.lmer))
# mixed.lmer <- nlme::nlme(LEMS ~ SSasympOff(ExamStage_weeks.rescaled*YEARDOI.rescaled+AgeAtDOI.rescaled, Asym, R0, lrc),
#            data = df1,
#            fixed = Asym + R0 + lrc ~ 1,
#            random = Asym ~ 1,
#            na.action=na.exclude,
#            na.fail(emsci.rescaled),
#            naPattern = ~ !is.na(LEMS),
#            method="ML",verbose=TRUE)
n <- count(ranef(mixed.lmer))
# Capture summary stats
intercept.estimate <- coef(summary(mixed.lmer))[1]
time_rescaled.estimate <- coef(summary(mixed.lmer))[2]
age.estimate <- coef(summary(mixed.lmer))[3]
intercept.std <- coef(summary(mixed.lmer))[4]
time_rescaled.std <- coef(summary(mixed.lmer))[5]
age.std <- coef(summary(mixed.lmer))[6]
intercept.df <- coef(summary(mixed.lmer))[7]
time_rescaled.df <- coef(summary(mixed.lmer))[8]
age.df <- coef(summary(mixed.lmer))[9]
intercept.tval <- coef(summary(mixed.lmer))[10]
time_rescaled.tval <- coef(summary(mixed.lmer))[11]
age.tval <- coef(summary(mixed.lmer))[12]
intercept.pval <- coef(summary(mixed.lmer))[13]
time_rescaled.pval <- coef(summary(mixed.lmer))[14]
age.pval <- coef(summary(mixed.lmer))[15]
# Get coefficents of mixed.lmer
cfit <- coef(summary(mixed.lmer))
# Create temporary data frame
df <- data.frame( plegia= j,AIS = i, intercept.estimate = cfit[1], time_rescaled.estimate = cfit[2],
age.estimate= cfit[3], intercept.std= cfit[4],
time_rescaled.std =cfit[5],
age.std =cfit[6],
intercept.df =cfit[7],
time_rescaled.df =cfit[8],
age.df =cfit[9],
intercept.tval =cfit[10],
time_rescaled.tval =cfit[11],
age.tval =cfit[12],
intercept.pval =cfit[13],
time_rescaled.pval =cfit[14],
age.pval =cfit[15],
stringsAsFactors = F)
df2<- cbind(df, n)
# Bind rows of temporary data frame to the results data frame
results <- rbind(results, df2)
#results<- cbind(results, n)
}
}
}
coef(summary(mixed.lmer))
# Capture summary stats
intercept.estimate <- coef(summary(mixed.lmer))[1]
time_rescaled.estimate <- coef(summary(mixed.lmer))[2]
yeardoi.estimate <- coef(summary(mixed.lmer))[3]
yeardoi_weeks.estimate <- coef(summary(mixed.lmer))[4]
intercept.std <- coef(summary(mixed.lmer))[5]
time_rescaled.std <- coef(summary(mixed.lmer))[6]
yeardoi.std <- coef(summary(mixed.lmer))[7]
yeardoi_weeks.std <- coef(summary(mixed.lmer))[8]
intercept.df <- coef(summary(mixed.lmer))[9]
time_rescaled.df <- coef(summary(mixed.lmer))[10]
yeardoi.df <- coef(summary(mixed.lmer))[11]
yeardoi_weeks.df <- coef(summary(mixed.lmer))[12]
intercept.tval <- coef(summary(mixed.lmer))[13]
time_rescaled.tval <- coef(summary(mixed.lmer))[14]
yeardoi.tval <- coef(summary(mixed.lmer))[15]
yeardoi_weeks.tval <- coef(summary(mixed.lmer))[16]
intercept.pval <- coef(summary(mixed.lmer))[17]
time_rescaled.pval <- coef(summary(mixed.lmer))[18]
yeardoi.pval <- coef(summary(mixed.lmer))[19]
yeardoi_weeks.yeardoi.pval <- coef(summary(mixed.lmer))[20]
yeardoi_weeks.yeardoi.pval
mixed.lmer
summary(mixed.lmer)
results
# Capture summary stats
intercept.estimate <- coef(summary(mixed.lmer))[1]
time_rescaled.estimate <- coef(summary(mixed.lmer))[2]
yeardoi.estimate <- coef(summary(mixed.lmer))[3]
yeardoi_weeks.estimate <- coef(summary(mixed.lmer))[4]
intercept.std <- coef(summary(mixed.lmer))[5]
time_rescaled.std <- coef(summary(mixed.lmer))[6]
yeardoi.std <- coef(summary(mixed.lmer))[7]
yeardoi_weeks.std <- coef(summary(mixed.lmer))[8]
intercept.df <- coef(summary(mixed.lmer))[9]
time_rescaled.df <- coef(summary(mixed.lmer))[10]
yeardoi.df <- coef(summary(mixed.lmer))[11]
yeardoi_weeks.df <- coef(summary(mixed.lmer))[12]
intercept.tval <- coef(summary(mixed.lmer))[13]
time_rescaled.tval <- coef(summary(mixed.lmer))[14]
yeardoi.tval <- coef(summary(mixed.lmer))[15]
yeardoi_weeks.tval <- coef(summary(mixed.lmer))[16]
intercept.pval <- coef(summary(mixed.lmer))[17]
time_rescaled.pval <- coef(summary(mixed.lmer))[18]
yeardoi.pval <- coef(summary(mixed.lmer))[19]
yeardoi_weeks.pval <- coef(summary(mixed.lmer))[20]
mixed.lmer<- nlme::lme(WISCI ~ ExamStage_weeks.rescaled*YEARDOI.rescaled, df1, random = ~ 1|Patientennummer, na.action = na.exclude)
print(summary(mixed.lmer))
mixed.lmer
print(summary(mixed.lmer))
#---------- Rescale Data
rescale.many <- function(dat, column.nos) {
nms <- names(dat)
for(col in column.nos) {
name <- paste(nms[col],".rescaled", sep = "")
dat[name] <- rescale(dat[,col], center = TRUE, scale = TRUE)
}
cat(paste("Rescaled ", length(column.nos),      " variable(s)n"))
dat
}
emsci.rescaled <-rescale.many(emsci.trauma.sex.baseline.ais, c(6,8,11))
# Prepare selection variables
ais.score<-unique(emsci.rescaled$baseline.ais)
rescaled.nli <- unique(emsci.rescaled$plegia)
emsci.rescaled$Patientennummer <- as.factor(emsci.rescaled$Patientennummer)
AgeGroup<-unique(as.factor(emsci.trauma.sex.baseline.ais$AgeGroup))
# Create data frame to store results
results <- data.frame()
for (j in rescaled.nli){
for (i in ais.score){
for (h in AgeGroup){
print(paste("MODEL",j, i,  h,sep = " "))
df1 = subset(emsci.rescaled, (baseline.ais == i & plegia == j))
if (nrow(df1) == 0) next
mixed.lmer<- nlme::lme(WISCI ~ ExamStage_weeks.rescaled*YEARDOI.rescaled, df1, random = ~ 1|Patientennummer, na.action = na.exclude)
print(summary(mixed.lmer))
# mixed.lmer <- nlme::nlme(LEMS ~ SSasympOff(ExamStage_weeks.rescaled*YEARDOI.rescaled+AgeAtDOI.rescaled, Asym, R0, lrc),
#            data = df1,
#            fixed = Asym + R0 + lrc ~ 1,
#            random = Asym ~ 1,
#            na.action=na.exclude,
#            na.fail(emsci.rescaled),
#            naPattern = ~ !is.na(LEMS),
#            method="ML",verbose=TRUE)
n <- count(ranef(mixed.lmer))
# Capture summary stats
intercept.estimate <- coef(summary(mixed.lmer))[1]
time_rescaled.estimate <- coef(summary(mixed.lmer))[2]
yeardoi.estimate <- coef(summary(mixed.lmer))[3]
yeardoi_weeks.estimate <- coef(summary(mixed.lmer))[4]
intercept.std <- coef(summary(mixed.lmer))[5]
time_rescaled.std <- coef(summary(mixed.lmer))[6]
yeardoi.std <- coef(summary(mixed.lmer))[7]
yeardoi_weeks.std <- coef(summary(mixed.lmer))[8]
intercept.df <- coef(summary(mixed.lmer))[9]
time_rescaled.df <- coef(summary(mixed.lmer))[10]
yeardoi.df <- coef(summary(mixed.lmer))[11]
yeardoi_weeks.df <- coef(summary(mixed.lmer))[12]
intercept.tval <- coef(summary(mixed.lmer))[13]
time_rescaled.tval <- coef(summary(mixed.lmer))[14]
yeardoi.tval <- coef(summary(mixed.lmer))[15]
yeardoi_weeks.tval <- coef(summary(mixed.lmer))[16]
intercept.pval <- coef(summary(mixed.lmer))[17]
time_rescaled.pval <- coef(summary(mixed.lmer))[18]
yeardoi.pval <- coef(summary(mixed.lmer))[19]
yeardoi_weeks.pval <- coef(summary(mixed.lmer))[20]
# Get coefficents of mixed.lmer
cfit <- coef(summary(mixed.lmer))
# Create temporary data frame
df <- data.frame( plegia= j,AIS = i,AgeGroup=h, intercept.estimate = cfit[1], time_rescaled.estimate = cfit[2],
yeardoi.estimate= cfit[3], yeardoi_weeks.estimate= cfit[4],intercept.std= cfit[5],
time_rescaled.std =cfit[6],
yeardoi.std =cfit[7],
yeardoi_weeks.std =cfit[8],
intercept.df =cfit[9],
time_rescaled.df =cfit[10],
yeardoi.df =cfit[11],
yeardoi_weeks.df =cfit[12],
intercept.tval =cfit[13],
time_rescaled.tval =cfit[14],
yeardoi.tval =cfit[15],
yeardoi_weeks.tval =cfit[16],
intercept.pval =cfit[17],
time_rescaled.pval =cfit[18],
yeardoi.pval =cfit[19],
yeardoi_weeks.pval =cfit[20],
stringsAsFactors = F)
df2<- cbind(df, n)
# Bind rows of temporary data frame to the results data frame
results <- rbind(results, df2)
#results<- cbind(results, n)
}
}
}
# Reformat the data frame created above
new_data <-merged.stack(results,                ## Add the id if it doesn't exist
var.stubs = c("estimate", "std", "df", "tval", "pval"),   ## Specify the stubs
sep = "var.stubs",                   ## The sep is just the stubs
atStart = FALSE)
new_data.2 <- as.data.frame(new_data)
# Rename variables
names(new_data.2)[names(new_data.2) == '.time_1'] <- 'Variable'
names(new_data.2)[names(new_data.2) == 'estimate'] <- 'Estimate'
names(new_data.2)[names(new_data.2) == 'std'] <- 'Standard Error'
names(new_data.2)[names(new_data.2) == 'df'] <- 'DF'
names(new_data.2)[names(new_data.2) == 'tval'] <- 't-value'
names(new_data.2)[names(new_data.2) == 'pval'] <- 'p-value'
# Create a new variable based on condition
new_data.2$order[(new_data.2$Variable == 'intercept.')] <- 1
new_data.2$order[(new_data.2$Variable == 'ExamStage_weeks.rescaled')] <- 2
new_data.2$order[(new_data.2$Variable == 'time_rescaled.')] <- 3
new_data.2$order[(new_data.2$Variable == 'Cause_new.')] <- 4
# Create a new variable based on condition
new_data.2$Variable[(new_data.2$Variable == 'intercept.')] <- "Intercept"
new_data.2$Variable[(new_data.2$Variable == 'age.')] <- "Age"
new_data.2$Variable[(new_data.2$Variable == 'time_rescaled.')] <- "Time since injury"
new_data.2$Variable[(new_data.2$Variable == 'Cause_new')] <- "Cause"
# Create a new variable based on condition
new_data.2$model_temp[(new_data.2$plegia == "tetra" & new_data.2$AIS == "A")] <- 'Tetraplegia:AIS A'
new_data.2$model_temp[(new_data.2$plegia == "tetra" & new_data.2$AIS == "B")] <- 'Tetraplegia:AIS B'
new_data.2$model_temp[(new_data.2$plegia == "tetra" & new_data.2$AIS == "C" )] <- 'Tetraplegia:AIS C'
new_data.2$model_temp[(new_data.2$plegia == "tetra" & new_data.2$AIS == "D" )] <- 'Tetraplegia:AIS D'
new_data.2$model_temp[(new_data.2$plegia == "para" & new_data.2$AIS == "A" )] <- 'Paraplegia:AIS A'
new_data.2$model_temp[(new_data.2$plegia == "para" & new_data.2$AIS == "B" )] <- 'Paraplegia:AIS B'
new_data.2$model_temp[(new_data.2$plegia == "para" & new_data.2$AIS == "C" )] <- 'Paraplegia:AIS C'
new_data.2$model_temp[(new_data.2$plegia == "para" & new_data.2$AIS == "D" )] <- 'Paraplegia:AIS D'
# Add adjusted p-value column
new_data.2$Adjusted.pval<- as.numeric(new_data.2$`p-value`)*8
# Rename column
names(new_data.2)[names(new_data.2) == 'Adjusted.pval'] <- 'Adjusted p-value'
# Make t-value, p-value, and Adjusted p-value numeric
new_data.2$`t-value`<-as.numeric(new_data.2$`t-value`)
new_data.2$`p-value`<-as.numeric(new_data.2$`p-value`)
new_data.2$`Adjusted p-value`<-as.numeric(new_data.2$`Adjusted p-value`)
# Function to round to 3 digits
round_df <- function(x, digits) {
# round all numeric variables
# x: data frame
# digits: number of digits to round
numeric_columns <- sapply(x, mode) == 'numeric'
x[numeric_columns] <-  round(x[numeric_columns], digits)
x
}
new_data_3 <- round_df(new_data.2, 4)
# Sort data
new_data_4 <- arrange(new_data_3,model_temp,order)
# Create a new variable based on condition
new_data_4$Model[(new_data_4$plegia == "tetra" & new_data_4$AIS == "A" & new_data_4$order==1)] <- 'Tetraplegia: AIS A'
new_data_4$Model[(new_data_4$plegia == "tetra" & new_data_4$AIS == "B"& new_data_4$order==1)] <- 'Tetraplegia: AIS B'
new_data_4$Model[(new_data_4$plegia == "tetra" & new_data_4$AIS == "C" & new_data_4$order==1)] <- 'Tetraplegia: AIS C'
new_data_4$Model[(new_data_4$plegia == "tetra" & new_data_4$AIS == "D" & new_data_4$order==1)] <- 'Tetraplegia: AIS D'
new_data_4$Model[(new_data_4$plegia == "para" & new_data_4$AIS == "A" & new_data_4$order==1)] <- 'Paraplegia: AIS A'
new_data_4$Model[(new_data_4$plegia == "para" & new_data_4$AIS == "B" & new_data_4$order==1)] <- 'Paraplegia: AIS B'
new_data_4$Model[(new_data_4$plegia == "para" & new_data_4$AIS == "C" & new_data_4$order==1)] <- 'Paraplegia: AIS C'
new_data_4$Model[(new_data_4$plegia == "para" & new_data_4$AIS == "D" & new_data_4$order==1)] <- 'Paraplegia: AIS D'
# Replace NA with empty cell
new_data_4[is.na(new_data_4)] <- ""
new_data_4[new_data_4 == "<NA>"] <- ""
new_data_4
# Rename variables
names(new_data.2)[names(new_data.2) == '.time_1'] <- 'Variable'
names(new_data.2)[names(new_data.2) == 'estimate'] <- 'Estimate'
names(new_data.2)[names(new_data.2) == 'std'] <- 'Standard Error'
names(new_data.2)[names(new_data.2) == 'df'] <- 'DF'
names(new_data.2)[names(new_data.2) == 'tval'] <- 't-value'
names(new_data.2)[names(new_data.2) == 'pval'] <- 'p-value'
new_data.2
print(paste("MODEL",j, i, h,sep = " "))
for (j in rescaled.nli){
for (i in ais.score){
for (h in AgeGroup){
print(paste("MODEL",j, i, h,sep = " "))
df1 = subset(emsci.rescaled, (baseline.ais == i & plegia == j & AgeGroup==h))
if (nrow(df1) == 0) next
mixed.lmer<- nlme::lme(WISCI ~ ExamStage_weeks.rescaled*YEARDOI.rescaled, df1, random = ~ 1|Patientennummer, na.action = na.exclude)
print(summary(mixed.lmer))
# mixed.lmer <- nlme::nlme(LEMS ~ SSasympOff(ExamStage_weeks.rescaled*YEARDOI.rescaled+AgeAtDOI.rescaled, Asym, R0, lrc),
#            data = df1,
#            fixed = Asym + R0 + lrc ~ 1,
#            random = Asym ~ 1,
#            na.action=na.exclude,
#            na.fail(emsci.rescaled),
#            naPattern = ~ !is.na(LEMS),
#            method="ML",verbose=TRUE)
n <- count(ranef(mixed.lmer))
# Capture summary stats
intercept.estimate <- coef(summary(mixed.lmer))[1]
time_rescaled.estimate <- coef(summary(mixed.lmer))[2]
yeardoi.estimate <- coef(summary(mixed.lmer))[3]
yeardoi_weeks.estimate <- coef(summary(mixed.lmer))[4]
intercept.std <- coef(summary(mixed.lmer))[5]
time_rescaled.std <- coef(summary(mixed.lmer))[6]
yeardoi.std <- coef(summary(mixed.lmer))[7]
yeardoi_weeks.std <- coef(summary(mixed.lmer))[8]
intercept.df <- coef(summary(mixed.lmer))[9]
time_rescaled.df <- coef(summary(mixed.lmer))[10]
yeardoi.df <- coef(summary(mixed.lmer))[11]
yeardoi_weeks.df <- coef(summary(mixed.lmer))[12]
intercept.tval <- coef(summary(mixed.lmer))[13]
time_rescaled.tval <- coef(summary(mixed.lmer))[14]
yeardoi.tval <- coef(summary(mixed.lmer))[15]
yeardoi_weeks.tval <- coef(summary(mixed.lmer))[16]
intercept.pval <- coef(summary(mixed.lmer))[17]
time_rescaled.pval <- coef(summary(mixed.lmer))[18]
yeardoi.pval <- coef(summary(mixed.lmer))[19]
yeardoi_weeks.pval <- coef(summary(mixed.lmer))[20]
# Get coefficents of mixed.lmer
cfit <- coef(summary(mixed.lmer))
# Create temporary data frame
df <- data.frame( plegia= j,AIS = i,AgeGroup=h, intercept.estimate = cfit[1], time_rescaled.estimate = cfit[2],
yeardoi.estimate= cfit[3], yeardoi_weeks.estimate= cfit[4],intercept.std= cfit[5],
time_rescaled.std =cfit[6],
yeardoi.std =cfit[7],
yeardoi_weeks.std =cfit[8],
intercept.df =cfit[9],
time_rescaled.df =cfit[10],
yeardoi.df =cfit[11],
yeardoi_weeks.df =cfit[12],
intercept.tval =cfit[13],
time_rescaled.tval =cfit[14],
yeardoi.tval =cfit[15],
yeardoi_weeks.tval =cfit[16],
intercept.pval =cfit[17],
time_rescaled.pval =cfit[18],
yeardoi.pval =cfit[19],
yeardoi_weeks.pval =cfit[20],
stringsAsFactors = F)
df2<- cbind(df, n)
# Bind rows of temporary data frame to the results data frame
results <- rbind(results, df2)
#results<- cbind(results, n)
}
}
}
# Reformat the data frame created above
new_data <-merged.stack(results,                ## Add the id if it doesn't exist
var.stubs = c("estimate", "std", "df", "tval", "pval"),   ## Specify the stubs
sep = "var.stubs",                   ## The sep is just the stubs
atStart = FALSE)
new_data.2 <- as.data.frame(new_data)
# Rename variables
names(new_data.2)[names(new_data.2) == '.time_1'] <- 'Variable'
names(new_data.2)[names(new_data.2) == 'estimate'] <- 'Estimate'
names(new_data.2)[names(new_data.2) == 'std'] <- 'Standard Error'
names(new_data.2)[names(new_data.2) == 'df'] <- 'DF'
names(new_data.2)[names(new_data.2) == 'tval'] <- 't-value'
names(new_data.2)[names(new_data.2) == 'pval'] <- 'p-value'
# Create a new variable based on condition
new_data.2$order[(new_data.2$Variable == 'intercept.')] <- 1
new_data.2$order[(new_data.2$Variable == 'ExamStage_weeks.rescaled')] <- 2
new_data.2$order[(new_data.2$Variable == 'time_rescaled.')] <- 3
# Rename variables
names(new_data.2)[names(new_data.2) == '.time_1'] <- 'Variable'
names(new_data.2)[names(new_data.2) == 'estimate'] <- 'Estimate'
names(new_data.2)[names(new_data.2) == 'std'] <- 'Standard Error'
names(new_data.2)[names(new_data.2) == 'df'] <- 'DF'
names(new_data.2)[names(new_data.2) == 'tval'] <- 't-value'
names(new_data.2)[names(new_data.2) == 'pval'] <- 'p-value'
# Create a new variable based on condition
new_data.2$order[(new_data.2$Variable == 'intercept.')] <- 1
new_data.2$order[(new_data.2$Variable == 'ExamStage_weeks.rescaled')] <- 2
new_data.2$order[(new_data.2$Variable == 'yeardoi')] <- 3
new_data.2$order[(new_data.2$Variable == 'yeardoi_weeks')] <- 4
# Create a new variable based on condition
new_data.2$Variable[(new_data.2$Variable == 'intercept.')] <- "Intercept"
new_data.2$Variable[(new_data.2$Variable == 'age.')] <- "Age"
new_data.2$Variable[(new_data.2$Variable == 'yeardoi')] <- "Time since injury"
new_data.2$Variable[(new_data.2$Variable == 'yeardoi_weeks')] <- "Year*Time since injury"
new_data.2$AgeGroup
# Create a new variable based on condition
new_data.2$model_temp[(new_data.2$plegia == "tetra" & new_data.2$AIS == "A"& new_data.2$AgeGroup=="0-29")] <- 'Tetraplegia:AIS A, 0-29 years'
new_data.2
