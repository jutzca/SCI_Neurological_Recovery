group_by(ID) %>%
sample_frac(15/nrow(sim_study))
a
a<-sim_study %>%
group_by(N2_Latency_STA) %>%
sample_frac(15/nrow(sim_study))
a
library(plyr)
set.seed(1)
library(plyr)
set.seed(1)
dat <- data.frame(
id = unique(sim_study$ID),
Category = sample(sim_study$N2_Latency_STA, 100, replace=TRUE, prob=c(0,0,0,0,0,0,0,0,0,0,20,20,20,20,20))
)
sampleOne <- function(id, fraction=0.1){
sort(sample(id, round(length(id)*fraction)))
}
ddply(dat, .(Category), summarize, sampleID=sampleOne(id, fraction=0.2))
dat <- data.frame(
id = subset(sim_study, ID=='C02'),
Category = sample(sim_study$N2_Latency_STA, 100, replace=TRUE, prob=c(0,0,0,0,0,0,0,0,0,0,20,20,20,20,20))
)
sim_study$N2_Latency_STA
id = sim_studyc01$ID),
Category = sample(sim_study$N2_Latency_STA, 100, replace=TRUE, prob=c(0,0,0,0,0,0,0,0,0,0,20,20,20,20,20))
dat <- data.frame(
id = sim_studyc01$ID,
Category = sample(sim_studyc01$N2_Latency_STA, 100, replace=TRUE, prob=c(0,0,0,0,0,0,0,0,0,0,20,20,20,20,20))
)
dat <- data.frame(
id = sim_studyc01$ID,
Category = sample(sim_studyc01$N2_Latency_STA, 15, replace=TRUE, prob=c(0,0,0,0,0,0,0,0,0,0,20,20,20,20,20))
)
sampleOne <- function(id, fraction=0.1){
sort(sample(id, round(length(id)*fraction)))
}
ddply(dat, .(Category), summarize, sampleID=sampleOne(id, fraction=0.2))
ddply(dat, .(Category), summarize, sampleID=sampleOne(id, fraction=0.8))
sampleOne <- function(id, fraction=0.8){
sort(sample(id, round(length(id)*fraction)))
}
ddply(dat, .(Category), summarize, sampleID=sampleOne(id, fraction=0.2))
ddply(dat, .(Category), summarize, sampleID=sampleOne(id, fraction=0.2))
ddply(dat, .(Category), summarize, sampleID=sampleOne(id, fraction=1))
dat <- data.frame(
id = sim_studyc01$ID,
Category = sample(sim_studyc01$N2_Latency_STA, 15, replace=TRUE, prob=c(0,0,0,0,0,0,0,0,0,0,0,0,0,0,100))
)
sampleOne <- function(id, fraction=0.8){
sort(sample(id, round(length(id)*fraction)))
}
ddply(dat, .(Category), summarize, sampleID=sampleOne(id, fraction=1))
dat <- data.frame(
id = sim_studyc01$ID,
Category = sample(sim_studyc01$trial_weight, 15, replace=TRUE, prob=c(0,0,0,0,0,0,0,0,0,0,0,0,0,0,100))
)
sampleOne <- function(id, fraction=0.8){
sort(sample(id, round(length(id)*fraction)))
}
ddply(dat, .(Category), summarize, sampleID=sampleOne(id, fraction=1))
dat
dat <- data.frame(
id = sim_studyc01$ID,
Category = sample(sim_studyc01$trial_weight, 15, replace=TRUE, prob=c(0,0,0,0,0,0,0,0,0,0,0,0,0,0,100))
latency=sim_studyc01$N2_Latency_STA
)
dat <- data.frame(
id = sim_studyc01$ID,
Category = sample(sim_studyc01$trial_weight, 15, replace=TRUE, prob=c(0,0,0,0,0,0,0,0,0,0,0,0,0,0,100),
latency=sim_studyc01$N2_Latency_STA)
)
dat <- data.frame(
id = sim_studyc01$ID,
Category = sample(sim_studyc01$trial_weight, 15, replace=TRUE, prob=c(0,0,0,0,0,0,0,0,0,0,0,0,0,0,100)),
latency=sim_studyc01$N2_Latency_STA)
dat <- data.frame(
id = sim_studyc01$ID,
Category = sample(sim_studyc01$trial_weight, 15, replace=TRUE, prob=c(0,0,0,0,0,0,0,0,0,0,0,0,0,0,100)),
latency=sim_studyc01$N2_Latency_STA)
sampleOne <- function(id, fraction=0.8){
sort(sample(id, round(length(id)*fraction)))
}
ddply(dat, .(Category, ), summarize, sampleID=sampleOne(id, fraction=1))
dat
sampleOne
library(devtools)
source_gist("https://gist.github.com/mrdwab/6424112")
## [1] "https://raw.github.com/gist/6424112"
## SHA-1 hash of file is 0006d8548785ec8a5651c3dd599648cc88d153a4
set.seed(1)
dat1 <- data.frame(ID = 1:100, A = sample(c("AA", "BB", "CC", "DD", "EE"), 100,
replace = TRUE), B = rnorm(100), C = abs(round(rnorm(100), digits = 1)),
D = sample(c("CA", "NY", "TX"), 100, replace = TRUE), E = sample(c("M",
"F"), 100, replace = TRUE))
dat1
w <- sim_studyc01$N2_Latency_STA
pw <- c(0,0,0,0,0,0,0,0,0,0,20,20,20,20,20)
winnings <- sample(w, size = 100000, replace = TRUE, prob = pw)
winnings
mean(winnings)
stratified <- function(sim_study,trial_weight , 0.1, select = NULL,
replace = FALSE, bothSets = FALSE) {
if (is.null(select)) {
df <- df
} else {
if (is.null(names(select))) stop("'select' must be a named list")
if (!all(names(select) %in% names(df)))
stop("Please verify your 'select' argument")
temp <- sapply(names(select),
function(x) df[[x]] %in% select[[x]])
df <- df[rowSums(temp) == length(select), ]
}
df.interaction <- interaction(df[group], drop = TRUE)
df.table <- table(df.interaction)
df.split <- split(df, df.interaction)
if (length(size) > 1) {
if (length(size) != length(df.split))
stop("Number of groups is ", length(df.split),
" but number of sizes supplied is ", length(size))
if (is.null(names(size))) {
n <- setNames(size, names(df.split))
message(sQuote("size"), " vector entered as:\n\nsize = structure(c(",
paste(n, collapse = ", "), "),\n.Names = c(",
paste(shQuote(names(n)), collapse = ", "), ")) \n\n")
} else {
ifelse(all(names(size) %in% names(df.split)),
n <- size[names(df.split)],
stop("Named vector supplied with names ",
paste(names(size), collapse = ", "),
"\n but the names for the group levels are ",
paste(names(df.split), collapse = ", ")))
}
} else if (size < 1) {
n <- round(df.table * size, digits = 0)
} else if (size >= 1) {
if (all(df.table >= size) || isTRUE(replace)) {
n <- setNames(rep(size, length.out = length(df.split)),
names(df.split))
} else {
message(
"Some groups\n---",
paste(names(df.table[df.table < size]), collapse = ", "),
"---\ncontain fewer observations",
" than desired number of samples.\n",
"All observations have been returned from those groups.")
n <- c(sapply(df.table[df.table >= size], function(x) x = size),
df.table[df.table < size])
}
}
temp <- lapply(
names(df.split),
function(x) df.split[[x]][sample(df.table[x],
n[x], replace = replace), ])
set1 <- do.call("rbind", temp)
if (isTRUE(bothSets)) {
set2 <- df[!rownames(df) %in% rownames(set1), ]
list(SET1 = set1, SET2 = set2)
} else {
set1
}
}
df <-sim_study
stratified <- function(df,trial_weight , 0.1, select = NULL,
replace = FALSE, bothSets = FALSE) {
if (is.null(select)) {
df <- df
} else {
if (is.null(names(select))) stop("'select' must be a named list")
if (!all(names(select) %in% names(df)))
stop("Please verify your 'select' argument")
temp <- sapply(names(select),
function(x) df[[x]] %in% select[[x]])
df <- df[rowSums(temp) == length(select), ]
}
df.interaction <- interaction(df[group], drop = TRUE)
df.table <- table(df.interaction)
df.split <- split(df, df.interaction)
if (length(size) > 1) {
if (length(size) != length(df.split))
stop("Number of groups is ", length(df.split),
" but number of sizes supplied is ", length(size))
if (is.null(names(size))) {
n <- setNames(size, names(df.split))
message(sQuote("size"), " vector entered as:\n\nsize = structure(c(",
paste(n, collapse = ", "), "),\n.Names = c(",
paste(shQuote(names(n)), collapse = ", "), ")) \n\n")
} else {
ifelse(all(names(size) %in% names(df.split)),
n <- size[names(df.split)],
stop("Named vector supplied with names ",
paste(names(size), collapse = ", "),
"\n but the names for the group levels are ",
paste(names(df.split), collapse = ", ")))
}
} else if (size < 1) {
n <- round(df.table * size, digits = 0)
} else if (size >= 1) {
if (all(df.table >= size) || isTRUE(replace)) {
n <- setNames(rep(size, length.out = length(df.split)),
names(df.split))
} else {
message(
"Some groups\n---",
paste(names(df.table[df.table < size]), collapse = ", "),
"---\ncontain fewer observations",
" than desired number of samples.\n",
"All observations have been returned from those groups.")
n <- c(sapply(df.table[df.table >= size], function(x) x = size),
df.table[df.table < size])
}
}
temp <- lapply(
names(df.split),
function(x) df.split[[x]][sample(df.table[x],
n[x], replace = replace), ])
set1 <- do.call("rbind", temp)
if (isTRUE(bothSets)) {
set2 <- df[!rownames(df) %in% rownames(set1), ]
list(SET1 = set1, SET2 = set2)
} else {
set1
}
}
stratified(sim_study, c("C01", "C02"), size = 0.15)
sim_study = read_csv(file.choose())
names(sim_study)
library(MonteCarlo)
set.seed(123)
names(sim_study)
sim_study = read_csv(file.choose())
names(sim_study)
library(MonteCarlo)
sample(x = c("1", "2", '3'), size = 10, replace = T,
prob = c(0.8, 0.2))
sample(x = c("1", "2", '3'), size = 10, replace = T,
prob = c(0.8, 0.2, 0))
sample(x = sim_study$N2_Latency_STA, size = 10, replace = T,
prob = c(0.8, 0.2, 0))
x = sim_study$N2_Latency_STA
means = replicate(n = 1000, expr = {
x_i = sample(x, length(x), replace = T)
mean(x_i)
})
means
sim_studyc01 <- subset(sim_study, ID == 'C01')
x = sim_studyc01$N2_Latency_STA
means = replicate(n = 1000, expr = {
x_i = sample(x, length(x), replace = T)
mean(x_i)
})
means
length(x)
means = replicate(n = 1, expr = {
x_i = sample(x, length(x), replace = T)
mean(x_i)
})
means
means
means = replicate(n = 10, expr = {
x_i = sample(x, length(x), replace = T)
mean(x_i)
})
means
means = replicate(n = 1000, expr = {
x_i = sample(x, length(x), replace = T)
mean(x_i)
})
means
means(means)
mean(means)
mean(x)
means = replicate(n = 10000, expr = {
x_i = sample(x, length(x), replace = T)
mean(x_i)
})
means
mean(means)
mean(x)
means = replicate(n = 1, expr = {
x_i = sample(x, length(x), replace = T)
mean(x_i)
})
means
mean(means)
mean(x)
sample(x = sim_study$N2_Latency_STA, size = 10, replace = T,
prob = c(0,0,0,0,0,0,0,0,0,0,0,0,0,0,100))
sample(x = sim_studyc01$N2_Latency_STA, size = 10, replace = T,
prob = c(0,0,0,0,0,0,0,0,0,0,0,0,0,0,100))
test1<-sample(x = sim_studyc01$N2_Latency_STA, size = 15, replace = T,
prob = c(0,0,0,0,0,0,0,0,0,0,0,0,0,0,100))
test1
mean(test1)
test1<-sample(x = sim_studyc01$N2_Latency_STA, size = 15, replace = T,
prob = c(0,0,0,0,0,0,0,0,0,0,0,0,0,20,80))
mean(test1)
test1<-sample(x = sim_studyc01$N2_Latency_STA, size = 15, replace = T,
prob = c(0,0,0,0,0,0,0,0,0,0,0,0,10,10,80))
mean(test1)
test1
test1<-sample(x = sim_studyc01$N2_Latency_STA, size = 15, replace = T,
prob = c(10,0,0,0,0,0,0,0,0,0,0,0,0,10,80))
mean(test1)
sim_study = read_csv(file.choose())
names(sim_study)
library(MonteCarlo)
set.seed(123)
test1<-sample(x = sim_studyc01$N2_Latency_STA, size = 15, replace = T,
prob = c(10,0,0,0,0,0,0,0,0,0,0,0,0,10,80))
mean(test1)
sim_studyc01$N2_Latency_STA
test1<-sample(x = sim_studyc01$N2P2_Amplitude, size = 15, replace = T,
prob = c(100,0,0,0,0,0,0,0,0,0,0,0,0,))
sim_studyc01$N2P2_Amplitude
test1<-sample(x = sim_studyc01$N2P2_Amplitude, size = 15, replace = T,
prob = c(100,0,0,0,0,0,0,0,0,0,0,0,0,0))
test1<-sample(x = sim_studyc01$N2P2_Amplitude, size = 15, replace = T,
prob = c(100,0,0,0,0,0,0,0,0,0,0,0,0))
test1<-sample(x = sim_studyc01$N2P2_Amplitude, size = 15, replace = T,
prob = c(100,0,0,0,0,0,0,0,0,0,0,0,0,0,0))
mean(test1)
test1<-sample(x = sim_studyc01$N2_Latency_STA, size = 15, replace = T,
prob = c(100,0,0,0,0,0,0,0,0,0,0,0,0,0,0))
mean(test1)
test1
test1<-sample(x = sim_studyc01$N2_Latency_STA, size = 15, replace = T,
prob = c(80,20,0,0,0,0,0,0,0,0,0,0,0,0,0))
mean(test1)
test1<-sample(x = sim_studyc01$N2_Latency_STA, size = 15, replace = T,
prob = c(50,10,10,10,10,0,0,0,0,0,0,0,0,0,0))
mean(test1)
test1<-sample(x = sim_studyc01$N2P2_Amplitude, size = 15, replace = T,
prob = c(50,10,10,10,10,0,0,0,0,0,0,0,0,0,0))
mean(test1)
dat = read.csv("ponds.csv")
sim_studyc01 <- subset(sim_study, ID == 'C01')
x = sim_studyc01$N2_Latency_STA
means = replicate(n = 1, expr = {
x_i = sample(x, length(x), replace = T)
mean(x_i)
})
sim_studyc01 <- subset(sim_study, ID == 'C01')
x = sim_studyc01$N2_Latency_STA
means = replicate(n = 1, expr = {
x_i = sample(x, length(x), replace = T)
mean(x_i)
})
means
mean(means)
mean(x)
x_i = sample(x, length(x), replace = T, prob = c(50,10,10,10,10,0,0,0,0,0,0,0,0,0,0))
mean(x_i)
means = replicate(n = 1, expr = {
x_i = sample(x, length(x), replace = T, prob = c(50,10,10,10,10,0,0,0,0,0,0,0,0,0,0))
mean(x_i)
})
means
mean(means)
mean(x)
means = replicate(n = 100, expr = {
x_i = sample(x, length(x), replace = T, prob = c(50,10,10,10,10,0,0,0,0,0,0,0,0,0,0))
mean(x_i)
})
means
test1<-sample(x = sim_studyc01$N2P2_Amplitude, size = 15, replace = T,
prob = c(100,0,0,0,0,0,0,0,0,0,0,0,0,0,0))
mean(test1)
test1<-sample(x = sim_studyc01$N2P2_Amplitude, size = 15, replace = T,
prob = c(80,20,0,0,0,0,0,0,0,0,0,0,0,0,0))
mean(test1)
test1<-sample(x = sim_studyc01$N2P2_Amplitude, size = 15, replace = T,
prob = c(80,10,10,0,0,0,0,0,0,0,0,0,0,0,0))
mean(test1)
test1<-sample(x = sim_studyc01$N2P2_Amplitude, size = 15, replace = T,
prob = c(70,10,10,10,0,0,0,0,0,0,0,0,0,0,0))
mean(test1)
test1<-sample(x = sim_studyc01$N2P2_Amplitude, size = 15, replace = T,
prob = c(60,10,10,10,10,0,0,0,0,0,0,0,0,0,0))
mean(test1)
test1<-sample(x = sim_studyc01$N2_Latency_STA, size = 15, replace = T,
prob = c(60,10,10,10,10,0,0,0,0,0,0,0,0,0,0))
mean(test1)
test1<-sample(x = sim_studyc01$N2_Latency_STA, size = 15, replace = T,
prob = c(70,10,10,10,0,0,0,0,0,0,0,0,0,0,0))
mean(test1)
test1<-sample(x = sim_studyc01$N2_Latency_STA, size = 15, replace = T,
prob = c(80,10,10,0,0,0,0,0,0,0,0,0,0,0,0))
mean(test1)
test1<-sample(x = sim_studyc01$N2_Latency_STA, size = 15, replace = T,
prob = c(890,10,0,0,0,0,0,0,0,0,0,0,0,0,0))
test1<-sample(x = sim_studyc01$N2_Latency_STA, size = 15, replace = T,
prob = c(90,10,0,0,0,0,0,0,0,0,0,0,0,0,0))
mean(test1)
test1<-sample(x = sim_studyc01$N2_Latency_STA, size = 15, replace = T,
prob = c(100,0,0,0,0,0,0,0,0,0,0,0,0,0,0))
mean(test1)
sim_studyc01$N2_Latency_STA
plot(sim_studyc01$N2_Latency_STA, sim_studyc01$N2P2_Amplitude)
#We wish to build the sampling distribution of the mean length “by hand”. We can sample randomly from it, calculate the mean, then repeat this process many times:
sim_studyc01 <- subset(sim_study, ID == 'C02')
#We wish to build the sampling distribution of the mean length “by hand”. We can sample randomly from it, calculate the mean, then repeat this process many times:
sim_studyc01 <- subset(sim_study, ID == 'C02')
plot(sim_studyc01$N2_Latency_STA, sim_studyc01$N2P2_Amplitude)
sim_study = read_csv(file.choose())
test1<-sample(x = sim_studyc01$N2_Latency, size = 14, replace = T,
prob = c(100,0,0,0,0,0,0,0,0,0,0,0,0,0))
names(sim_study)
#We wish to build the sampling distribution of the mean length “by hand”. We can sample randomly from it, calculate the mean, then repeat this process many times:
sim_studyc01 <- subset(sim_study, ID == 'C01')
test1<-sample(x = sim_studyc01$N2_Latency, size = 14, replace = T,
prob = c(100,0,0,0,0,0,0,0,0,0,0,0,0,0))
mean(test1)
test1<-sample(x = sim_studyc01$N2_Latency, size = 15, replace = T,
prob = c(100,0,0,0,0,0,0,0,0,0,0,0,0,0,))
test1<-sample(x = sim_studyc01$N2_Latency, size = 15, replace = T,
prob = c(100,0,0,0,0,0,0,0,0,0,0,0,0,0,0))
mean(test1)
sim_study = read_csv(file.choose())
#We wish to build the sampling distribution of the mean length “by hand”. We can sample randomly from it, calculate the mean, then repeat this process many times:
sim_studyc01 <- subset(sim_study, ID == 'C01')
test1<-sample(x = sim_studyc01$N2_Latency, size = 15, replace = T,
prob = c(100,0,0,0,0,0,0,0,0,0,0,0,0,0,0))
mean(test1)
sim_studyc01$N2_Latency
test1<-sample(x = sim_studyc01$N2_Latency, size = 15, replace = T,
prob = c(90,10,0,0,0,0,0,0,0,0,0,0,0,0,0))
mean(test1)
test1<-sample(x = sim_studyc01$N2_Latency, size = 15, replace = T,
prob = c(80,10,10,0,0,0,0,0,0,0,0,0,0,0,0))
mean(test1)
sim_studyc01$N2_Latency
test1<-sample(x = sim_studyc01$N2P2_Amplitude, size = 15, replace = T,
prob = c(80,10,10,0,0,0,0,0,0,0,0,0,0,0,0))
mean(test1)
prob = c((0,10,0,0,0,0,0,0,0,0,0,0,0,0,0))
test1<-sample(x = sim_studyc01$N2P2_Amplitude, size = 15, replace = T,
prob = c(90,10,0,0,0,0,0,0,0,0,0,0,0,0,0))
mean(test1)
test1<-sample(x = sim_studyc01$N2P2_Amplitude, size = 15, replace = T,
prob = c(100,0,0,0,0,0,0,0,0,0,0,0,0,0,0))
mean(test1)
#We wish to build the sampling distribution of the mean length “by hand”. We can sample randomly from it, calculate the mean, then repeat this process many times:
sim_studyc01 <- subset(sim_study, ID == 'C01')
test1<-sample(x = sim_studyc01$N2P2_Amplitude, size = 15, replace = T,
prob = c(100,0,0,0,0,0,0,0,0,0,0,0,0,0,0))
mean(test1)
test1<-sample(x = sim_studyc01$N2P2_Amplitude, size = 15, replace = T,
prob = c(50,10,10,10,10,0,0,0,0,0,0,0,0,0,0))
mean(test1)
test1<-sample(x = sim_studyc01$N2P2_Amplitude, size = 15, replace = T,
prob = c(40,10,10,10,10,0,0,0,0,0,0,0,0,0,10))
mean(test1)
mean(sim_studyc01$N2P2_Amplitude)
sim_studyc01$N2P2_Amplitude
plot(sim_studyc01$N2P2_Amplitude, sim_studyc01$N2_Latency)
sim_study = read_csv(file.choose())
names(sim_study)
library(MonteCarlo)
#We wish to build the sampling distribution of the mean length “by hand”. We can sample randomly from it, calculate the mean, then repeat this process many times:
sim_studyc01 <- subset(sim_study, ID == 'C02')
test1<-sample(x = sim_studyc01$N2P2_Amplitude, size = 15, replace = T,
prob = c(40,10,10,10,10,0,0,0,0,0,0,0,0,0,0))
mean(test1)
sim_studyc01$N2P2_Amplitude
plot(sim_studyc01$N2P2_Amplitude, sim_studyc01$N2_Latency)
sim_studyc01
#We wish to build the sampling distribution of the mean length “by hand”. We can sample randomly from it, calculate the mean, then repeat this process many times:
sim_studyc01 <- subset(sim_study, ID == 'C01')
plot(sim_studyc01$N2P2_Amplitude, sim_studyc01$N2_Latency)
plot(sim_studyc01$N2P2_Amplitude_STA, sim_studyc01$N2_Latency_STA)
test1<-sample(x = sim_studyc01$N2P2_Amplitude, size = 15, replace = T,
prob = c(100,0,0,0,0,0,0,0,0,0,0,0,0,0,0))
mean(test1)
test1<-sample(x = sim_studyc01$latency, size = 15, replace = T,
prob = c(100,0,0,0,0,0,0,0,0,0,0,0,0,0,0))
mean(test1)
#load original dataset
sta<- read.csv("/Volumes/jutzelec$/8_Projects/1_Ongoing/21_CHEPS_Latency_Jitter/sim_study_STA_results.csv'", sep = ',', header = T,  na.strings=c("","NA"))
#load original dataset
sta<- read.csv("/Volumes/jutzelec$/8_Projects/1_Ongoing/21_CHEPS_Latency_Jitter/sim_study_STA_results.csv", sep = ',', header = T,  na.strings=c("","NA"))
#load original dataset
sta<- read.csv("/Volumes/jutzelec$/8_Projects/1_Ongoing/21_CHEPS_Latency_Jitter/stim_study_STA_results", sep = ',', header = T,  na.strings=c("","NA"))
#load original dataset
sta<- read.csv("Volumes/jutzelec$/8_Projects/1_Ongoing/21_CHEPS_Latency_Jitter/stim_study_STA_results", sep = ',', header = T,  na.strings=c("","NA"))
#load original dataset
sta<- read.csv("/Volumes/jutzelec$/8_Projects/1_Ongoing/21_CHEPS_Latency_Jitter/stim_study_STA_results.csv", sep = ',', header = T,  na.strings=c("","NA"))
names(sta)
#load original dataset
sta<- read.csv("/Volumes/jutzelec$/8_Projects/1_Ongoing/21_CHEPS_Latency_Jitter/stim_study_STA_results.csv", sep = ',', header = T,  na.strings=c("","NA"))
names(sta)
rm(list=ls())
#load original dataset
sta<- read.csv("/Volumes/jutzelec$/8_Projects/1_Ongoing/21_CHEPS_Latency_Jitter/stim_study_STA_results.csv", sep = ',', header = T,  na.strings=c("","NA"))
names(sta)
ggplot(data=subset(sta, subject_id=='C01'), aes(x=N2P2_Amplitude_mean, y=N2_Latency_mean, group=stim_nr)+geom_point()+facet_grid(~.stim_nr)
ggplot(data=subset(sta, subject_id=='C01'), aes(x=N2P2_Amplitude_mean, y=N2_Latency_mean, group=stim_nr)+geom_point()+facet_grid(~.stim_nr)
ggplot(data=subset(sta, subject_id=='C01'), aes(x=N2P2_Amplitude_mean, y=N2_Latency_mean, group=stim_nr)+geom_point()+facet_grid(.~stim_nr)
ggplot(data=subset(sta, subject_id=='C01'), aes(x=N2P2_Amplitude_mean, y=N2_Latency_mean, group=stim_nr))+geom_point()+facet_grid(.~stim_nr)
ggplot(data=subset(sta, subject_id=='C01'), aes(x=N2P2_Amplitude_mean, y=N2_Latency_mean, group=stim_nr))+geom_point()+facet_grid(.~stim_nr)
ggplot(data=subset(sta, subject_id=='C01'), aes(x=N2P2_Amplitude_mean, y=N2_Latency_mean, group=stim_nr))+geom_point()+facet_grid(Type_Ave~stim_nr)
ggplot(data=c01), aes(x=N2P2_Amplitude_mean, y=N2_Latency_mean, group=stim_nr))+geom_point()+facet_grid(Type_Ave~stim_nr)
c01<-subset(sta, subject_id=='C01')
ggplot(data=c01), aes(x=N2P2_Amplitude_mean, y=N2_Latency_mean, group=stim_nr))+geom_point()+facet_grid(Type_Ave~stim_nr)
ggplot(data=c01, aes(x=N2P2_Amplitude_mean, y=N2_Latency_mean, group=stim_nr))+geom_point()+facet_grid(Type_Ave~stim_nr)
ggplot(data=c01, aes(x=N2P2_Amplitude_mean, y=N2_Latency_mean, color=stim_nr))+geom_point()+facet_grid(Type_Ave~stim_nr)
ggplot(data=c01, aes(x=N2P2_Amplitude_mean, y=N2_Latency_mean, color=proportion))+geom_point()+facet_grid(Type_Ave~stim_nr)
ggplot(data=c01, aes(x=N2P2_Amplitude_mean, y=N2_Latency_mean, color=proportion))+geom_point()+facet_grid(Type_Ave~stim_nr)+
theme_bw()
c01<-subset(sta, subject_id=='C02')
ggplot(data=c01, aes(x=N2P2_Amplitude_mean, y=N2_Latency_mean, color=proportion))+geom_point()+facet_grid(Type_Ave~stim_nr)+
theme_bw()
